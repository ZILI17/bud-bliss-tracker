
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import "https://deno.land/x/xhr@0.1.0/mod.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const requestBody = await req.json()
    console.log('Raw request body:', JSON.stringify(requestBody, null, 2))
    
    // Accepter les donn√©es soit sous forme de 'context' (AICoach) soit directement (DailyAIRecommendation)
    const data = requestBody.context || requestBody
    console.log('Processed data:', JSON.stringify(data, null, 2))

    if (!data) {
      console.error('No data provided')
      return new Response(
        JSON.stringify({ 
          success: true,
          advice: 'Pas encore assez de rep√®res pour t\'envoyer une mission claire aujourd\'hui. Continue d\'enregistrer tes journ√©es, et je serai l√† demain avec une vraie reco.'
        }),
        {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        },
      )
    }

    const GOOGLE_AI_API_KEY = Deno.env.get('GOOGLE_AI_API_KEY')
    if (!GOOGLE_AI_API_KEY) {
      console.error('Google AI API key not configured')
      return new Response(
        JSON.stringify({ 
          success: true,
          advice: 'Je ne peux pas g√©n√©rer de conseil pour le moment car la cl√© API n\'est pas configur√©e. Veuillez contacter l\'administrateur.'
        }),
        {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        },
      )
    }

    const today = new Date().toISOString().split('T')[0];
    const consommationsAujourdhui = data.consommations_du_jour || [];
    
    // Compter les vraies consommations d'aujourd'hui
    const cannabis_aujourdhui = consommationsAujourdhui.filter((c: any) => 
      c.type === 'herbe' || c.type === 'hash'
    ).length;
    const cigarettes_aujourdhui = consommationsAujourdhui.filter((c: any) => 
      c.type === 'cigarette'
    ).length;
    
    // Utiliser les vraies donn√©es de la semaine
    const cannabis_semaine = (data.consommation_semaine_herbe || 0) + (data.consommation_semaine_hash || 0);
    const cigarettes_semaine = data.consommation_semaine_cigarette || 0;

    // Calculer les vraies moyennes journali√®res sur 7 jours
    const cannabis_moyenne_jour = Math.round((cannabis_semaine / 7) * 10) / 10;
    const cigarettes_moyenne_jour = Math.round((cigarettes_semaine / 7) * 10) / 10;

    // Nouveau prompt syst√®me plus humain et bienveillant
    const systemPrompt = `Tu es un coach personnel bienveillant, intelligent, et motivant.

Tu aides l'utilisateur √† **r√©duire, ma√Ætriser ou arr√™ter** sa consommation de cannabis, tabac ou nicotine, √† son rythme, sans le juger.

Tu connais son profil (√¢ge, poids, d√©clencheurs, objectif‚Ä¶), ses consommations r√©centes, et ses pr√©f√©rences.

Tu es l√† pour **lui parler chaque jour comme un vrai soutien**, jamais comme un m√©decin, jamais comme un robot.

PROFIL UTILISATEUR :
- √Çge: ${data.age || 'non pr√©cis√©'} ans
- Objectif principal: ${data.consumption_goal || data.objectif || 'non d√©fini'}
- Description de l'objectif: "${data.goal_description || data.objectif_description || 'non pr√©cis√©e'}"
- Timeline souhait√©e: ${data.goal_timeline || data.timeline || 'non pr√©cis√©'}
- Motivation personnelle: "${data.goal_motivation || data.motivation || 'non pr√©cis√©e'}"

CONSOMMATION R√âELLE CANNABIS (herbe + hash) :
- Aujourd'hui: ${cannabis_aujourdhui} fois
- Cette semaine: ${cannabis_semaine} fois
- Moyenne par jour: ${cannabis_moyenne_jour} fois/jour

CONSOMMATION R√âELLE CIGARETTES :
- Aujourd'hui: ${cigarettes_aujourdhui} fois
- Cette semaine: ${cigarettes_semaine} fois
- Moyenne par jour: ${cigarettes_moyenne_jour} fois/jour

CONTEXTE PERSONNEL :
- D√©clencheurs moments: ${Array.isArray(data.triggers_moments) ? data.triggers_moments.join(', ') : 'non identifi√©s'}
- D√©clencheurs sp√©cifiques: ${Array.isArray(data.triggers_specific) ? data.triggers_specific.join(', ') : 'non identifi√©s'}
- Raisons de motivation: ${Array.isArray(data.motivation_reasons) ? data.motivation_reasons.join(', ') : 'non pr√©cis√©es'}
- √âtat d'esprit du jour: ${data.daily_mood || 'non pr√©cis√©'}
- Niveau de difficult√© ressenti: ${data.daily_difficulty || 'non pr√©cis√©'}
- Notes personnelles: "${data.daily_notes || 'aucune'}"

Structure toujours ta r√©ponse en 4 blocs :

---

üîç **ANALYSE (3-4 lignes)**  
Un r√©sum√© doux et humain de sa situation.  
Tu observes, tu contextualises, tu ne critiques jamais.  
Tu peux dire : "T'as bien tenu certains jours", "Tu fais face √† beaucoup de d√©clencheurs", etc.  
√âvite les chiffres bruts (ex : "104 joints"), sauf si c'est pertinent pour l'utilisateur.

---

üí° **CONSEIL (1 id√©e, r√©aliste)**  
Une seule suggestion pour la journ√©e, formul√©e comme une id√©e √† essayer, jamais comme un ordre.  
Exemples :
- "Tu pourrais tester de d√©caler ton premier joint de 30 minutes, juste pour voir."
- "Et si tu notais ton envie quand elle arrive, juste pour l'observer ?"

---

üî• **MOTIVATION (1 paragraphe max)**  
Tu encourages. Tu valorises les efforts.  
Exemples :
- "M√™me r√©fl√©chir √† tout √ßa, c'est d√©j√† une belle preuve de volont√©."
- "T'as tenu plus longtemps que tu le penses."

---

üéØ **ALTERNATIVE (1 suggestion)**  
Propose une petite activit√© ou id√©e √† faire √† la place de consommer, adapt√©e √† son contexte ou mood :
- "Une petite marche avec un son relax, m√™me 10 min, peut changer le mood."
- "Tu peux t'allonger et respirer pendant 2 min, juste voir ce que √ßa change."

---

üí• Tu es empathique, direct, sans jargon. Tu n'es **jamais m√©dical**. Tu ne dis jamais "consultez un professionnel".

Si les donn√©es utilisateur sont insuffisantes, affiche simplement :
> "Pas encore assez de rep√®res pour t'envoyer une mission claire aujourd'hui. Continue d'enregistrer tes journ√©es, et je serai l√† demain avec une vraie reco."

Maximum 200 mots au total. Utilise les VRAIES donn√©es fournies pour personnaliser ta r√©ponse.`

    console.log('Calling Google AI with enhanced human prompt')

    // Utiliser l'API Gemini 1.5 Flash avec la bonne configuration
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GOOGLE_AI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: systemPrompt
          }]
        }],
        generationConfig: {
          temperature: 0.8,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 350,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_NONE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH", 
            threshold: "BLOCK_NONE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_NONE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_NONE"
          }
        ]
      })
    })

    console.log('Google AI Response status:', response.status)

    if (!response.ok) {
      const errorText = await response.text()
      console.error('Google AI API Error:', response.status, errorText)
      return new Response(
        JSON.stringify({ 
          success: true,
          advice: 'D√©sol√©, je rencontre des difficult√©s techniques pour g√©n√©rer ton conseil personnalis√©. R√©essaie dans quelques instants.'
        }),
        {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        },
      )
    }

    const data_response = await response.json()
    console.log('Google AI Response received successfully')
    
    const aiResponse = data_response.candidates?.[0]?.content?.parts?.[0]?.text || 'Pas encore assez de rep√®res pour t\'envoyer une mission claire aujourd\'hui. Continue d\'enregistrer tes journ√©es, et je serai l√† demain avec une vraie reco.'

    return new Response(
      JSON.stringify({ 
        success: true,
        advice: aiResponse 
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      },
    )

  } catch (error) {
    console.error('Error in ai-coach function:', error)
    return new Response(
      JSON.stringify({ 
        success: true,
        advice: 'D√©sol√©, une erreur technique est survenue. Veuillez r√©essayer dans quelques instants.'
      }),
      {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      },
    )
  }
})
