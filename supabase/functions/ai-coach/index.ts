
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import "https://deno.land/x/xhr@0.1.0/mod.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const requestBody = await req.json()
    console.log('Raw request body:', JSON.stringify(requestBody, null, 2))
    
    // Accepter les donn√©es soit sous forme de 'context' (AICoach) soit directement (DailyAIRecommendation)
    const data = requestBody.context || requestBody
    console.log('Processed data:', JSON.stringify(data, null, 2))

    if (!data) {
      console.error('No data provided')
      return new Response(
        JSON.stringify({ 
          success: true,
          advice: 'Je pourrai mieux t\'aider d√®s que tu auras d√©fini ton objectif et enregistr√© quelques jours de consommation.'
        }),
        {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        },
      )
    }

    const GOOGLE_AI_API_KEY = Deno.env.get('GOOGLE_AI_API_KEY')
    if (!GOOGLE_AI_API_KEY) {
      console.error('Google AI API key not configured')
      return new Response(
        JSON.stringify({ 
          success: true,
          advice: 'Je ne peux pas g√©n√©rer de conseil pour le moment car la cl√© API n\'est pas configur√©e. Veuillez contacter l\'administrateur.'
        }),
        {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        },
      )
    }

    // Calculer les donn√©es par type de substance
    const cannabis_aujourdhui = (data.consommations_du_jour?.filter((c: any) => c.type === 'herbe')?.length || 0) + 
                                (data.consommations_du_jour?.filter((c: any) => c.type === 'hash')?.length || 0);
    const cigarettes_aujourdhui = data.consommations_du_jour?.filter((c: any) => c.type === 'cigarette')?.length || 0;
    
    const cannabis_semaine = (data.consommation_semaine_herbe || 0) + (data.consommation_semaine_hash || 0);
    const cigarettes_semaine = data.consommation_semaine_cigarette || 0;

    // Construire un prompt syst√®me enrichi et personnalis√©
    const systemPrompt = `Tu es un coach personnel bienveillant, sp√©cialis√© dans la r√©duction ou la ma√Ætrise de la consommation de cannabis, tabac ou nicotine.
Tu aides l'utilisateur √† progresser √† son rythme, sans jugement.

PROFIL UTILISATEUR :
- √Çge: ${data.age || 'non pr√©cis√©'} ans
- Objectif principal: ${data.consumption_goal || data.objectif || 'non d√©fini'}
- Description de l'objectif: "${data.goal_description || data.objectif_description || 'non pr√©cis√©e'}"
- Timeline souhait√©e: ${data.goal_timeline || data.timeline || 'non pr√©cis√©'}
- Motivation personnelle: "${data.goal_motivation || data.motivation || 'non pr√©cis√©e'}"

CONSOMMATION CANNABIS (herbe + hash) :
- Aujourd'hui: ${cannabis_aujourdhui} fois
- Cette semaine: ${cannabis_semaine} fois
- Progression g√©n√©rale: ${data.progression || 'd√©but du suivi'}

CONSOMMATION CIGARETTES :
- Aujourd'hui: ${cigarettes_aujourdhui} fois  
- Cette semaine: ${cigarettes_semaine} fois

CONTEXTE PERSONNEL :
- D√©clencheurs moments: ${Array.isArray(data.triggers_moments) ? data.triggers_moments.join(', ') : 'non identifi√©s'}
- D√©clencheurs sp√©cifiques: ${Array.isArray(data.triggers_specific) ? data.triggers_specific.join(', ') : 'non identifi√©s'}
- Raisons de motivation: ${Array.isArray(data.motivation_reasons) ? data.motivation_reasons.join(', ') : 'non pr√©cis√©es'}
- √âtat d'esprit du jour: ${data.daily_mood || 'non pr√©cis√©'}
- Niveau de difficult√© ressenti: ${data.daily_difficulty || 'non pr√©cis√©'}
- Notes personnelles: "${data.daily_notes || 'aucune'}"

CONSIGNES STRICTES :
1. Structure OBLIGATOIREMENT ta r√©ponse avec ces 4 sections clairement s√©par√©es :
   **üîç ANALYSE** - Contexte personnalis√© selon les donn√©es
   **üí° CONSEIL** - Une id√©e concr√®te √† appliquer aujourd'hui  
   **üî• MOTIVATION** - Encouragement personnalis√© selon son objectif
   **üéØ ALTERNATIVE** - Une activit√© pour remplacer l'envie de consommer

2. Diff√©rencie TOUJOURS cannabis et cigarettes dans tes conseils
3. Sois bienveillant, motivant et informel (tutoiement)
4. Ne propose JAMAIS de consulter un m√©decin ou demander de l'aide ext√©rieure
5. L'outil doit √™tre autonome et autosuffisant
6. Maximum 180 mots au total
7. Utilise les donn√©es personnelles pour personnaliser vraiment le conseil

R√©ponds maintenant selon cette structure obligatoire.`

    console.log('Calling Google AI with enhanced prompt')

    // Utiliser l'API Gemini 1.5 Flash avec la bonne configuration
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GOOGLE_AI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: systemPrompt
          }]
        }],
        generationConfig: {
          temperature: 0.8,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 300,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_NONE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH", 
            threshold: "BLOCK_NONE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_NONE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_NONE"
          }
        ]
      })
    })

    console.log('Google AI Response status:', response.status)

    if (!response.ok) {
      const errorText = await response.text()
      console.error('Google AI API Error:', response.status, errorText)
      return new Response(
        JSON.stringify({ 
          success: true,
          advice: 'D√©sol√©, je rencontre des difficult√©s techniques pour g√©n√©rer ton conseil personnalis√©. R√©essaie dans quelques instants.'
        }),
        {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        },
      )
    }

    const data_response = await response.json()
    console.log('Google AI Response received successfully')
    
    const aiResponse = data_response.candidates?.[0]?.content?.parts?.[0]?.text || 'Je pourrai mieux t\'aider d√®s que tu auras d√©fini ton objectif et enregistr√© quelques jours de consommation.'

    return new Response(
      JSON.stringify({ 
        success: true,
        advice: aiResponse 
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      },
    )

  } catch (error) {
    console.error('Error in ai-coach function:', error)
    return new Response(
      JSON.stringify({ 
        success: true,
        advice: 'D√©sol√©, une erreur technique est survenue. Veuillez r√©essayer dans quelques instants.'
      }),
      {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      },
    )
  }
})
