
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import "https://deno.land/x/xhr@0.1.0/mod.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const requestBody = await req.json()
    console.log('Raw request body:', JSON.stringify(requestBody, null, 2))
    
    // Accepter les donn√©es soit sous forme de 'context' (AICoach) soit directement (DailyAIRecommendation)
    const data = requestBody.context || requestBody
    console.log('Processed data:', JSON.stringify(data, null, 2))

    if (!data) {
      console.error('No data provided')
      return new Response(
        JSON.stringify({ 
          success: true,
          advice: 'Pas encore assez de rep√®res pour t\'envoyer une mission claire aujourd\'hui. Continue d\'enregistrer tes journ√©es, et je serai l√† demain avec une vraie reco.'
        }),
        {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        },
      )
    }

    const GOOGLE_AI_API_KEY = Deno.env.get('GOOGLE_AI_API_KEY')
    if (!GOOGLE_AI_API_KEY) {
      console.error('Google AI API key not configured')
      return new Response(
        JSON.stringify({ 
          success: true,
          advice: 'Je ne peux pas g√©n√©rer de conseil pour le moment car la cl√© API n\'est pas configur√©e. Veuillez contacter l\'administrateur.'
        }),
        {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        },
      )
    }

    const today = new Date().toISOString().split('T')[0];
    const consommationsAujourdhui = data.consommations_du_jour || [];
    
    // Compter les vraies consommations d'aujourd'hui
    const cannabis_aujourdhui = consommationsAujourdhui.filter((c: any) => 
      c.type === 'herbe' || c.type === 'hash'
    ).length;
    const cigarettes_aujourdhui = consommationsAujourdhui.filter((c: any) => 
      c.type === 'cigarette'
    ).length;
    
    // Utiliser les vraies donn√©es de la semaine
    const cannabis_semaine = (data.consommation_semaine_herbe || 0) + (data.consommation_semaine_hash || 0);
    const cigarettes_semaine = data.consommation_semaine_cigarette || 0;

    // Calculer les vraies moyennes journali√®res sur 7 jours
    const cannabis_moyenne_jour = Math.round((cannabis_semaine / 7) * 10) / 10;
    const cigarettes_moyenne_jour = Math.round((cigarettes_semaine / 7) * 10) / 10;

    // Nouveau prompt syst√®me plus humain et bienveillant
    const systemPrompt = `Tu es un coach personnel bienveillant, intelligent, et motivant.

Tu aides l'utilisateur √† **r√©duire, ma√Ætriser ou arr√™ter** sa consommation de cannabis, tabac ou nicotine, √† son rythme, sans le juger.

Tu connais TOUT son profil d√©taill√© et tu DOIS utiliser ces informations pour personnaliser tes conseils.

INSTRUCTIONS CRITIQUES :
1. UTILISE TOUJOURS les d√©clencheurs identifi√©s pour proposer des strat√©gies sp√©cifiques
2. CROISE les donn√©es de consommation avec l'humeur et les difficult√©s du jour
3. ADAPTE tes conseils selon ses activit√©s alternatives pr√©f√©r√©es
4. TIENS COMPTE de ses motivations personnelles dans tes encouragements
5. POSE des questions pertinentes si tu d√©tectes des patterns inqui√©tants
6. SOIS CONCRET : propose des actions pr√©cises, pas des g√©n√©ralit√©s

PROFIL UTILISATEUR :
- √Çge: ${data.age || 'non pr√©cis√©'} ans
- Objectif principal: ${data.consumption_goal || data.objectif || 'non d√©fini'}
- Description de l'objectif: "${data.goal_description || data.objectif_description || 'non pr√©cis√©e'}"
- Timeline souhait√©e: ${data.goal_timeline || data.timeline || 'non pr√©cis√©'}
- Motivation personnelle: "${data.goal_motivation || data.motivation || 'non pr√©cis√©e'}"

CONSOMMATION R√âELLE CANNABIS (herbe + hash) :
- Aujourd'hui: ${cannabis_aujourdhui} fois
- Cette semaine: ${cannabis_semaine} fois
- Moyenne par jour: ${cannabis_moyenne_jour} fois/jour

CONSOMMATION R√âELLE CIGARETTES :
- Aujourd'hui: ${cigarettes_aujourdhui} fois
- Cette semaine: ${cigarettes_semaine} fois
- Moyenne par jour: ${cigarettes_moyenne_jour} fois/jour

CONTEXTE PERSONNEL :
- D√©clencheurs moments: ${Array.isArray(data.triggers_moments) ? data.triggers_moments.join(', ') : 'non identifi√©s'}
- D√©clencheurs sp√©cifiques: ${Array.isArray(data.triggers_specific) ? data.triggers_specific.join(', ') : 'non identifi√©s'}
- Raisons de motivation: ${Array.isArray(data.motivation_reasons) ? data.motivation_reasons.join(', ') : 'non pr√©cis√©es'}
- Activit√©s alternatives: ${Array.isArray(data.alternative_activities) ? data.alternative_activities.join(', ') : 'aucune'}
- Soutien entourage: ${data.support_entourage ? 'Oui' : 'Non'}
- Pr√©f√©rence de soutien: ${data.support_preference || 'non pr√©cis√©e'}
- Fume avec cigarettes: ${data.smokes_with_cannabis ? 'Oui (' + (data.cigarettes_per_joint || 1) + ' cig/joint)' : 'Non'}
- √âtat d'esprit du jour: ${data.daily_mood || 'non pr√©cis√©'}
- Niveau de difficult√© ressenti: ${data.daily_difficulty || 'non pr√©cis√©'}
- Notes personnelles: "${data.daily_notes || 'aucune'}"

Structure toujours ta r√©ponse en 4 blocs :

---

üîç **ANALYSE (3-4 lignes)**  
UTILISE ses d√©clencheurs, son humeur du jour, et ses patterns de consommation.
Croise les donn√©es : si il dit √™tre stress√© ET que ses d√©clencheurs incluent "stress", fais le lien !
Si ses consommations augmentent les jours o√π il note certaines difficult√©s, mentionne-le.
Sois observateur et perspicace, pas g√©n√©rique.

---

üí° **CONSEIL (1 id√©e, r√©aliste)**  
ADAPTE selon ses activit√©s alternatives et ses d√©clencheurs.
Si il aime la musique ET que son d√©clencheur est l'ennui, propose de la musique.
Si il consomme apr√®s les repas, propose une alternative post-repas.
Sois SP√âCIFIQUE √† sa situation, pas g√©n√©raliste.

---

üî• **MOTIVATION (1 paragraphe max)**  
UTILISE ses raisons de motivation personnelles.
Si il veut "avoir plus d'√©nergie", rappelle-lui ce b√©n√©fice.
Si il a une motivation personnelle √©crite, r√©f√©rence-toi y.
Connecte ses efforts actuels √† ses objectifs personnels.

---

üéØ **ALTERNATIVE (1 suggestion)**  
PIOCHE dans ses activit√©s alternatives pr√©f√©r√©es.
Adapte selon son humeur : si fatigu√©, propose quelque chose de doux.
Si stress√©, propose ses activit√©s anti-stress pr√©f√©r√©es.
Si il n'a pas d'alternatives, POSE UNE QUESTION : "Qu'est-ce qui te d√©tend habituellement ?"

---

üí• Tu es empathique, direct, sans jargon. Tu n'es **jamais m√©dical**. Tu ne dis jamais "consultez un professionnel".

Si les donn√©es utilisateur sont insuffisantes, affiche simplement :
> "Pas encore assez de rep√®res pour t'envoyer une mission claire aujourd'hui. Continue d'enregistrer tes journ√©es, et je serai l√† demain avec une vraie reco."

Maximum 200 mots au total. Utilise les VRAIES donn√©es fournies pour personnaliser ta r√©ponse.`

    console.log('Calling Google AI with enhanced human prompt')

    // Utiliser l'API Gemini 1.5 Flash avec la bonne configuration
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GOOGLE_AI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: systemPrompt
          }]
        }],
        generationConfig: {
          temperature: 0.8,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 350,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_NONE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH", 
            threshold: "BLOCK_NONE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_NONE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_NONE"
          }
        ]
      })
    })

    console.log('Google AI Response status:', response.status)

    if (!response.ok) {
      const errorText = await response.text()
      console.error('Google AI API Error:', response.status, errorText)
      return new Response(
        JSON.stringify({ 
          success: true,
          advice: 'D√©sol√©, je rencontre des difficult√©s techniques pour g√©n√©rer ton conseil personnalis√©. R√©essaie dans quelques instants.'
        }),
        {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        },
      )
    }

    const data_response = await response.json()
    console.log('Google AI Response received successfully')
    
    const aiResponse = data_response.candidates?.[0]?.content?.parts?.[0]?.text || 'Pas encore assez de rep√®res pour t\'envoyer une mission claire aujourd\'hui. Continue d\'enregistrer tes journ√©es, et je serai l√† demain avec une vraie reco.'

    return new Response(
      JSON.stringify({ 
        success: true,
        advice: aiResponse 
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      },
    )

  } catch (error) {
    console.error('Error in ai-coach function:', error)
    return new Response(
      JSON.stringify({ 
        success: true,
        advice: 'D√©sol√©, une erreur technique est survenue. Veuillez r√©essayer dans quelques instants.'
      }),
      {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      },
    )
  }
})
